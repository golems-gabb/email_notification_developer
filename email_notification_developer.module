<?php

/**
 * @file
 * Implements the necessary hooks for message reception error and change domain.
 */

/**
 * Implements hook_menu().
 */
function email_notification_developer_menu() {
  $items = array();
  $items['admin/config/developer'] = array(
    'title' => 'Email notification developer settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_notification_developer_config_domain'),
    'access arguments' => array('administer site configuration'),

  );
  $items['admin/config/developer/domain'] = array(
    'title' => 'Domain notification settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/developer/error'] = array(
    'title' => 'Error notification settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_notification_developer_config_error'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function email_notification_developer_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form_id) && $form_id == 'system_cron_settings') {
    $period_domain = variable_get(
      'email_notification_developer_period_domain',
      0
    );
    $period_emails = variable_get(
      'email_notification_developer_period_emails',
      0
    );
    if (!empty($form['cron']['cron_safe_threshold']['#options']) && (!empty($period_domain) || $period_emails)) {
      if (!empty($period_domain)) {
        $form['cron']['cron_safe_threshold']['#options'] += drupal_map_assoc(
          array(3600 * $period_domain),
          'format_interval'
        );
      }
      if (!empty($period_emails)) {
        $form['cron']['cron_safe_threshold']['#options'] += drupal_map_assoc(
          array(3600 * $period_emails),
          'format_interval'
        );
      }
      ksort($form['cron']['cron_safe_threshold']['#options']);
      reset($form['cron']['cron_safe_threshold']['#options']);
    }
  }
}

/**
 * Implements hook_cron().
 */
function email_notification_developer_cron() {
  $activate_domain = variable_get(
    'email_notification_developer_activate_domain',
    0
  );
  $activate_error = variable_get(
    'email_notification_developer_activate_error',
    0
  );
  if (!empty($activate_domain) || !empty($activate_error)) {
    $module_cron_last = variable_get('email_notification_developer_cron_last', 0);
    if (empty($module_cron_last)) {
      variable_set('email_notification_developer_cron_last', time());
      email_notification_developer_check_errors();
      email_notification_developer_check_domain();
    }
    else {
      $p_domain = variable_get('email_notification_developer_period_domain', 0);
      $p_error = variable_get('email_notification_developer_period_emails', 0);
      if (!empty($module_cron_last) && (!empty($p_domain) || !empty($p_error))) {
        $end = date('Y-m-d H:i:s', $module_cron_last);
        $begin = new DateTime($end);
        if (!empty($begin) && is_object($begin)) {
          $begin_domain = $begin->modify('+' . $p_domain . ' minute');
          $begin_error = $begin->modify('+' . $p_error . ' minute');
          if (!empty($begin_domain->date)) {
            $start_date_domain = $begin_domain->date;
          }
          if (!empty($begin_error->date)) {
            $start_date_error = $begin_error->date;
          }
        }
        else {
          $start_date_domain = date(
            'Y-m-d H:i:s',
            $module_cron_last + $p_domain * 3600
          );
          $start_date_error = date(
            'Y-m-d H:i:s',
            $module_cron_last + $p_error * 3600
          );
        }
        if (!empty($start_date_error) && !empty($activate_error)) {
          email_notification_developer_run_newsletter($start_date_error, 'e');
        }
        if (!empty($start_date_domain) && !empty($activate_domain)) {
          email_notification_developer_run_newsletter($start_date_domain, 'd');
        }
      }
    }
  }
}

/**
 * Callback email_notification_developer_config_domain().
 */
function email_notification_developer_config_domain($form, &$form_state) {
  global $base_root;
  $form = array();
  $url_cron = $base_root . '/admin/config/system/cron';
  $form['email_notification_developer_activate_domain'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate functionality'),
    '#return_value' => 1,
    '#default_value' => variable_get('email_notification_developer_activate_domain', 0),
    '#description' => t('Activate functionality for Email notification of change of domain.'),
  );
  $form['email_notification_developer_period_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('The period of inspection'),
    '#required' => TRUE,
    '#default_value' => variable_get('email_notification_developer_period_domain', 0),
    '#element_validate' => array('email_notification_developer_validate_period'),
    '#description' => t('Period (given in hours) at which will trigger functionality. This period will be available <a target= "_blank" href="@url" >Cron</a> period shown in the format hours, days, weeks (ie 10 days - 1 week 3 days). Numerical maximum period of 30 days.', array('@url' => url($url_cron))),
  );
  $form['email_notification_developer_list_domain'] = array(
    '#type' => 'textarea',
    '#title' => t('Domain list'),
    '#required' => TRUE,
    '#default_value' => variable_get('email_notification_developer_list_domain', ''),
    '#element_validate' => array('email_notification_developer_validate_domain'),
    '#description' => t('Enter domain names through a separator comma or Enter, no spaces.'),
  );
  $form['email_notification_developer_emails_list_domain'] = array(
    '#type' => 'textarea',
    '#title' => t('Emails list'),
    '#required' => TRUE,
    '#default_value' => variable_get('email_notification_developer_emails_list_domain', ''),
    '#element_validate' => array('email_notification_developer_validate_email'),
    '#description' => t('Enter up to ten email adresses Enter through the separator or comma, without blank lines.'),
  );
  return system_settings_form($form);
}

/**
 * Callback email_notification_developer_config_error().
 */
function email_notification_developer_config_error() {
  global $base_root;
  $form = array();
  $url_cron = $base_root . '/admin/config/system/cron';
  $form['email_notification_developer_activate_error'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate functionality'),
    '#return_value' => 1,
    '#default_value' => variable_get('email_notification_developer_activate_error', 0),
    '#description' => t('Activate message to Email functionality of PHP errors on the site.'),
  );
  $form['email_notification_developer_period_emails'] = array(
    '#type' => 'textfield',
    '#title' => t('The period of inspection'),
    '#required' => TRUE,
    '#default_value' => variable_get('email_notification_developer_period_emails', 0),
    '#element_validate' => array('email_notification_developer_validate_period'),
    '#description' => t('Period (given in hours) at which will trigger functionality. This period will be available <a target= "_blank" href="@url" >Cron</a> period shown in the format hours, days, weeks (ie 10 days - 1 week 3 days). Numerical maximum period of 30 days.', array('@url' => url($url_cron))),
  );
  $form['email_notification_developer_emails_list_error'] = array(
    '#type' => 'textarea',
    '#title' => t('Emails list'),
    '#required' => TRUE,
    '#default_value' => variable_get('email_notification_developer_emails_list_error', ''),
    '#element_validate' => array('email_notification_developer_validate_email'),
    '#description' => t('Enter up to ten email adresses Enter through the separator or comma, without blank lines.'),
  );
  return system_settings_form($form);
}

/**
 * Function email_notification_developer_validate_email().
 */
function email_notification_developer_validate_email($element, &$form_state, $form) {
  $arrays_email = preg_split("/\,|\r\n|\n/", $element['#value']);
  if (!empty($arrays_email) && count($arrays_email) == count(array_unique($arrays_email, SORT_STRING))) {
    if (count($arrays_email) < 10) {
      foreach ($arrays_email as $email) {
        $email_isset = trim($email);
        if (!empty($email_isset)) {
          if ($email_isset != $email) {
            form_error($element, t('Remove spaces.'));
          }
          elseif (!valid_email_address($email)) {
            form_error($element, t('Please enter a valid email address.'));
          }
        }
        else {
          form_error($element, t('Remove the empty string.'));
        }
      }
    }
    else {
      form_error($element, t('Maximum 10 email adresses to send.'));
    }
  }
  else {
    form_error($element, t('Remove duplicates.'));
  }
}

/**
 * Function email_notification_developer_validate_domain().
 */
function email_notification_developer_validate_domain($element, &$form_state, $form) {
  $arrays_domain = preg_split("/\,|\r\n|\n/", $element['#value']);
  if (!empty($arrays_domain) && count($arrays_domain) == count(array_unique($arrays_domain, SORT_STRING))) {
    $block_reg = '\.\/$%@#\*!:;?&,â„–\-=+\[\]\{\}\|"\'`\(\)\s';
    $reg = '/^(https*\:\/\/)*[^' . $block_reg . ']{2,20}\.([^' . $block_reg . ']{2,10}\.+)?([^' . $block_reg .
      ']{2,10})?([^' . $block_reg . ']{2,10}\.[^' . $block_reg . ']{2,10})?$/i';
    foreach ($arrays_domain as $domain) {
      $domain_isset = trim($domain);
      if (!empty($domain_isset)) {
        if ($domain_isset != $domain) {
          form_error($element, t('Remove spaces.'));
        }
        elseif (!preg_match($reg, $domain)) {
          form_error($element, t('Please enter a valid domain.'));
        }
      }
      else {
        form_error($element, t('Remove the empty string.'));
      }
    }
  }
  else {
    form_error($element, t('Remove duplicates.'));
  }
}

/**
 * Function email_notification_developer_validate_period().
 */
function email_notification_developer_validate_period($element, &$form_state, $form) {
  if (!preg_match('/^\d+$/i', $element['#value']) || $element['#value'] * 60 > 2592000) {
    if ($element['#value'] * 60 > 2592000) {
      form_error($element, t('Introduced during 30 days.'));
    }
    else {
      form_error($element, t('The value of the field can only be a positive numeric field.'));
    }
  }
}

/**
 * Function email_notification_developer_check_domain().
 */
function email_notification_developer_check_domain() {
  global $base_root;
  $emails_list = variable_get('email_notification_developer_emails_list_domain', '');
  $list_domain = variable_get('email_notification_developer_list_domain', '');
  $site_domens_array = array(
    $base_root,
    preg_replace('/https*\:\/\/(www.)?/i', '', $base_root),
  );
  if (!empty($emails_list) && !empty($list_domain) && !empty($site_domens_array)) {
    $list_domain = preg_split("/\,|\r\n|\n/", $list_domain);
    $isset_domain = array_intersect($list_domain, $site_domens_array);
    if (empty($isset_domain)) {
      $emails_array = preg_split("/\,|\r\n|\n/", $emails_list);
      $emails_count = count($emails_array);
      if ($emails_count >= 1) {
        for ($count = 0; $count < $emails_count; $count++) {
          $email = $emails_array[$count];
          if (!empty($email)) {
            drupal_mail('system', 'mail', $email, language_default(), array(
              'context' => array(
                'subject' => t('Change domain (@domain)', array('@domain' => $base_root)),
                'message' => t('Domain resource changed to (@domain)', array('@domain' => $base_root)),
              ),
            ));
          }
        }
      }
    }
  }
}

/**
 * Function email_notification_developer_check_errors().
 */
function email_notification_developer_check_errors() {
  global $base_root;
  $bugs = db_select('watchdog', 'w')
    ->fields('w', array('wid', 'message', 'variables', 'severity', 'timestamp'))
    ->condition(
    db_or()
      ->condition('type', 'php')
      ->condition('type', 'email')
    )
    ->orderBy('timestamp', 'DESC')->execute()->fetchAll();
  if (!empty($bugs)) {
    foreach ($bugs as $value) {
      $bugs_array[] = trim(t($value->message, unserialize($value->variables)));
    }
  }
  $bugs_array = array_unique($bugs_array);
  $text_message = implode("\n\n", $bugs_array);
  $emails_list = variable_get('email_notification_developer_emails_list_error', '');
  if (!empty($emails_list) && !empty($text_message)) {
    $emails_array = preg_split("/\,|\r\n|\n/", $emails_list);
    $emails_count = count($emails_array);
    if ($emails_count >= 1) {
      for ($count = 0; $count < $emails_count; $count++) {
        $email = $emails_array[$count];
        if (!empty($email)) {
          drupal_mail('system', 'mail', $email, language_default(), array(
            'context' => array(
              'subject' => t('Errors resource: @domain', array('@domain' => $base_root)),
              'message' => $text_message,
            ),
          ));
        }
      }
    }
  }
}

/**
 * Function email_notification_developer_run_newsletter().
 */
function email_notification_developer_run_newsletter($start_date, $qualifier) {
  if (!empty($start_date) && $start_date <= date('Y-m-d H:i:s', (time()))) {
    variable_set('email_notification_developer_cron_last', time());
    if ($qualifier == 'e') {
      email_notification_developer_check_errors();
    }
    if ($qualifier == 'd') {
      email_notification_developer_check_domain();
    }
  }
}
